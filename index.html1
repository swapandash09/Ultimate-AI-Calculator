<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Calculator Pro</title>
    <style>
        :root {
            --primary: #6200ee;
            --secondary: #03dac6;
            --background: #ffffff;
            --text: #000000;
            --button: #f5f5f5;
            --button-hover: #e0e0e0;
            --display: #f8f8f8;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--background);
            color: var(--text);
            transition: all 0.3s ease;
        }

        .dark {
            --primary: #bb86fc;
            --secondary: #03dac6;
            --background: #121212;
            --text: #ffffff;
            --button: #1e1e1e;
            --button-hover: #2e2e2e;
            --display: #1e1e1e;
        }

        .colorful {
            --primary: #ff4081;
            --secondary: #00bcd4;
            --background: #f8f8f8;
            --text: #333333;
            --button: #e0f7fa;
            --button-hover: #b2ebf2;
            --display: #ffffff;
        }

        .calculator {
            max-width: 320px;
            margin: 0 auto;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            background-color: var(--background);
        }

        .display {
            padding: 20px;
            text-align: right;
            font-size: 2.5em;
            background-color: var(--display);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            min-height: 60px;
            word-wrap: break-word;
        }

        .buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1px;
            background-color: rgba(0, 0, 0, 0.1);
        }

        button {
            border: none;
            padding: 20px;
            font-size: 1.2em;
            background-color: var(--button);
            color: var(--text);
            cursor: pointer;
            transition: all 0.2s;
        }

        button:hover {
            background-color: var(--button-hover);
        }

        .operator {
            background-color: var(--primary);
            color: white;
        }

        .operator:hover {
            background-color: var(--primary);
            opacity: 0.9;
        }

        .equals {
            background-color: var(--secondary);
            color: white;
        }

        .equals:hover {
            background-color: var(--secondary);
            opacity: 0.9;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
        }

        .control-btn {
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            background-color: var(--primary);
            color: white;
        }

        .history-panel {
            max-width: 320px;
            margin: 20px auto;
            padding: 15px;
            border-radius: 8px;
            background-color: var(--display);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: none;
        }

        .history-panel h3 {
            margin-top: 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding-bottom: 10px;
        }

        #historyList {
            list-style: none;
            padding: 0;
            max-height: 200px;
            overflow-y: auto;
        }

        #historyList li {
            padding: 8px 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .bill-scanner {
            max-width: 320px;
            margin: 20px auto;
            padding: 15px;
            border-radius: 8px;
            background-color: var(--display);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .scan-status {
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
            text-align: center;
        }

        .scanning {
            background-color: #fff3e0;
            color: #e65100;
        }

        .complete {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .active {
            background-color: #d32f2f !important;
        }

        @media (max-width: 400px) {
            .calculator, .history-panel, .bill-scanner {
                max-width: 100%;
            }
        }
    </style>
</head>
<body class="light">
    <div class="calculator">
        <div class="display" id="display">0</div>
        <div class="buttons">
            <button class="operator" onclick="handleButton('(')">(</button>
            <button class="operator" onclick="handleButton(')')">)</button>
            <button class="operator" onclick="handleButton('C')">C</button>
            <button class="operator" onclick="handleButton('/')">/</button>
            
            <button onclick="handleButton('7')">7</button>
            <button onclick="handleButton('8')">8</button>
            <button onclick="handleButton('9')">9</button>
            <button class="operator" onclick="handleButton('*')">×</button>
            
            <button onclick="handleButton('4')">4</button>
            <button onclick="handleButton('5')">5</button>
            <button onclick="handleButton('6')">6</button>
            <button class="operator" onclick="handleButton('-')">-</button>
            
            <button onclick="handleButton('1')">1</button>
            <button onclick="handleButton('2')">2</button>
            <button onclick="handleButton('3')">3</button>
            <button class="operator" onclick="handleButton('+')">+</button>
            
            <button onclick="handleButton('0')">0</button>
            <button onclick="handleButton('.')">.</button>
            <button class="equals" onclick="handleButton('=')">=</button>
        </div>
    </div>

    <div class="controls">
        <button class="control-btn" id="theme-cycle">Theme</button>
        <button class="control-btn" id="lang-cycle">English</button>
        <button class="control-btn" id="voiceToggle">Voice OFF</button>
        <button class="control-btn" id="historyToggle">History</button>
    </div>

    <div class="history-panel" id="historyPanel">
        <h3>Calculation History</h3>
        <ul id="historyList"></ul>
        <div id="historyInsights"></div>
    </div>

    <div class="bill-scanner">
        <h3>Bill Scanner</h3>
        <input type="file" id="billInput" accept="image/*" capture="camera">
        <div id="billResult"></div>
        <div class="scan-status" id="scanStatus"></div>
    </div>

    <script src="https://unpkg.com/mathjs@12.4.2/lib/browser/math.js"></script>
    <script src="https://unpkg.com/tesseract.js@5.0.4/dist/tesseract.min.js"></script>
    <script>
        // Calculator State
        const calculator = {
            currentInput: '0',
            currentLang: 'en-IN',
            calculationHistory: [],
            lastClickTime: 0,
            isVoiceActive: false,
            recognition: null,
            recognitionAttempts: 0,
            maxRecognitionAttempts: 3,
            lastVoiceToggleTime: 0,
            themeIndex: 0,
            themes: ['light', 'dark', 'colorful'],
            langIndex: 0,
            languages: [
                { code: 'en-IN', name: 'English' },
                { code: 'hi-IN', name: 'Hindi' },
                { code: 'bn-IN', name: 'Bengali' }
            ],
            translations: {
                'en-IN': {
                    'Cleared': 'Cleared',
                    'Plus': 'Plus',
                    'Minus': 'Minus',
                    'Multiply': 'Multiply',
                    'Divide': 'Divide',
                    'Number': 'Number',
                    'Error in calculation': 'Error in calculation',
                    'Please repeat the command clearly': 'Please repeat the command clearly',
                    'Voice control activated': 'Voice control activated',
                    'Voice control stopped': 'Voice control stopped',
                    'Voice error, please try again': 'Voice error, please try again',
                    'Mic failed to start, check permissions': 'Failed to start microphone. Please ensure your microphone is connected and permissions are granted.',
                    'No speech detected, please speak': 'No speech detected, please speak',
                    'Mic not found, check your device': 'Microphone not found, please check your device',
                    'Mic permission denied, allow it': 'Microphone permission denied, please enable it in browser settings',
                    'Theme changed to light': 'Theme changed to light',
                    'Theme changed to dark': 'Theme changed to dark',
                    'Theme changed to colorful': 'Theme changed to colorful',
                    'Language changed to English': 'Language changed to English',
                    'Language changed to Hindi': 'Language changed to Hindi',
                    'Language changed to Bengali': 'Language changed to Bengali',
                    'Scanning bill': 'Scanning bill',
                    'Error scanning bill': 'Error scanning bill',
                    'Scan complete': 'Scan complete',
                    'Showing your calculation history': 'Showing your calculation history',
                    'Your average calculation result is': 'Your average calculation result is',
                    'No numeric calculations in history yet': 'No numeric calculations in history yet',
                    'Voice recognition unavailable. Please use Chrome or Edge.': 'Voice recognition unavailable. Please use Chrome or Edge.'
                },
                'hi-IN': {
                    'Cleared': 'साफ हो गया',
                    'Plus': 'जोड़',
                    'Minus': 'घटाव',
                    'Multiply': 'गुणा',
                    'Divide': 'भाग',
                    'Number': 'नंबर',
                    'Error in calculation': 'गणना में त्रुटि',
                    'Please repeat the command clearly': 'कृपया कमांड को स्पष्ट रूप से दोहराएं',
                    'Voice control activated': 'वॉइस कंट्रोल शुरू हो गया',
                    'Voice control stopped': 'वॉइस कंट्रोल बंद हो गया',
                    'Voice error, please try again': 'वॉइस में त्रुटि, कृपया फिर से कोशिश करें',
                    'Mic failed to start, check permissions': 'माइक शुरू करने में असफल, कृपया सुनिश्चित करें कि माइक कनेक्ट है और अनुमतियाँ दी गई हैं।',
                    'No speech detected, please speak': 'कोई आवाज नहीं मिली, कृपया बोलें',
                    'Mic not found, check your device': 'माइक नहीं मिला, अपने डिवाइस की जांच करें',
                    'Mic permission denied, allow it': 'माइक अनुमति अस्वीकृत, कृपया ब्राउज़र सेटिंग्स में इसे सक्षम करें',
                    'Theme changed to light': 'थीम लाइट में बदल गई',
                    'Theme changed to dark': 'थीम डार्क में बदल गई',
                    'Theme changed to colorful': 'थीम रंगीन में बदल गई',
                    'Language changed to English': 'भाषा अंग्रेजी में बदल गई',
                    'Language changed to Hindi': 'भाषा हिंदी में बदल गई',
                    'Language changed to Bengali': 'भाषा बंगाली में बदल गई',
                    'Scanning bill': 'बिल स्कैन हो रहा है',
                    'Error scanning bill': 'बिल स्कैन करने में त्रुटि',
                    'Scan complete': 'स्कैन पूरा हुआ',
                    'Showing your calculation history': 'आपकी गणना का इतिहास दिखा रहा हूँ',
                    'Your average calculation result is': 'आपका औसत गणना परिणाम है',
                    'No numeric calculations in history yet': 'अभी तक इतिहास में कोई संख्यात्मक गणना नहीं',
                    'Voice recognition unavailable. Please use Chrome or Edge.': 'वॉइस रिकग्निशन उपलब्ध नहीं है। कृपया क्रोम या एज का उपयोग करें।'
                },
                'bn-IN': {
                    'Cleared': 'পরিষ্কার হয়ে গেছে',
                    'Plus': 'যোগ',
                    'Minus': 'বিয়োগ',
                    'Multiply': 'গুণ',
                    'Divide': 'ভাগ',
                    'Number': 'নম্বর',
                    'Error in calculation': 'গণনায় ত্রুটি',
                    'Please repeat the command clearly': 'দয়া করে কমান্ডটি স্পষ্টভাবে পুনরাবৃত্তি করুন',
                    'Voice control activated': 'ভয়েস নিয়ন্ত্রণ চালু হয়েছে',
                    'Voice control stopped': 'ভয়েস নিয়ন্ত্রণ বন্ধ হয়েছে',
                    'Voice error, please try again': 'ভয়েসে ত্রুটি, আবার চেষ্টা করুন',
                    'Mic failed to start, check permissions': 'মাইক চালু করতে ব্যর্থ, দয়া করে নিশ্চিত করুন মাইক সংযুক্ত আছে এবং অনুমতি দেওয়া হয়েছে।',
                    'No speech detected, please speak': 'কোনো শব্দ শনাক্ত হয়নি, বলুন',
                    'Mic not found, check your device': 'মাইক পাওয়া যায়নি, আপনার ডিভাইস চেক করুন',
                    'Mic permission denied, allow it': 'মাইকের অনুমতি প্রত্যাখ্যাত, দয়া করে ব্রাউজার সেটিংসে এটি সক্ষম করুন',
                    'Theme changed to light': 'থিম লাইটে পরিবর্তন হয়েছে',
                    'Theme changed to dark': 'থিম গাঢ়ে পরিবর্তন হয়েছে',
                    'Theme changed to colorful': 'থিম রঙিনে পরিবর্তন হয়েছে',
                    'Language changed to English': 'ভাষা ইংরেজিতে পরিবর্তন হয়েছে',
                    'Language changed to Hindi': 'ভাষা হিন্দিতে পরিবর্তন হয়েছে',
                    'Language changed to Bengali': 'ভাষা বাংলায় পরিবর্তন হয়েছে',
                    'Scanning bill': 'বিল স্ক্যান হচ্ছে',
                    'Error scanning bill': 'বিল স্ক্যান করতে ত্রুটি',
                    'Scan complete': 'স্ক্যান সম্পূর্ণ',
                    'Showing your calculation history': 'আপনার গণনার ইতিহাস দেখাচ্ছি',
                    'Your average calculation result is': 'আপনার গড় গণনার ফলাফল হল',
                    'No numeric calculations in history yet': 'এখনও ইতিহাসে কোনো সংখ্যার গণনা নেই',
                    'Voice recognition unavailable. Please use Chrome or Edge.': 'ভয়েস রিকগনিশন উপলব্ধ নয়। দয়া করে ক্রোম বা এজ ব্যবহার করুন।'
                }
            }
        };

        // DOM Elements
        const elements = {
            display: document.getElementById('display'),
            themeCycle: document.getElementById('theme-cycle'),
            langCycle: document.getElementById('lang-cycle'),
            voiceToggle: document.getElementById('voiceToggle'),
            historyToggle: document.getElementById('historyToggle'),
            historyPanel: document.getElementById('historyPanel'),
            historyList: document.getElementById('historyList'),
            historyInsights: document.getElementById('historyInsights'),
            billInput: document.getElementById('billInput'),
            billResult: document.getElementById('billResult'),
            scanStatus: document.getElementById('scanStatus')
        };

        // Initialize the calculator
        function initCalculator() {
            // Load math.js and wait for it to be ready
            if (typeof math === 'undefined') {
                console.error('math.js not loaded');
                return;
            }

            // Set up event listeners
            setupEventListeners();
            
            // Apply default theme
            applyTheme(calculator.themes[calculator.themeIndex]);
            
            // Update language button text
            updateLangButtonText();
        }

        // Set up all event listeners
        function setupEventListeners() {
            // Theme cycling
            elements.themeCycle.addEventListener('click', () => {
                calculator.themeIndex = (calculator.themeIndex + 1) % calculator.themes.length;
                applyTheme(calculator.themes[calculator.themeIndex]);
                speak(`Theme changed to ${calculator.themes[calculator.themeIndex]}`);
            });

            // Language cycling
            elements.langCycle.addEventListener('click', () => {
                calculator.langIndex = (calculator.langIndex + 1) % calculator.languages.length;
                calculator.currentLang = calculator.languages[calculator.langIndex].code;
                if (calculator.recognition) calculator.recognition.lang = calculator.currentLang;
                speak(`Language changed to ${calculator.languages[calculator.langIndex].name}`);
                updateLangButtonText();
            });

            // History toggle
            elements.historyToggle.addEventListener('click', () => {
                elements.historyPanel.style.display = elements.historyPanel.style.display === 'none' ? 'block' : 'none';
                updateHistoryUI();
            });

            // Voice control toggle
            elements.voiceToggle.addEventListener('click', async () => {
                const now = Date.now();
                if (now - calculator.lastVoiceToggleTime < 1000) return;
                calculator.lastVoiceToggleTime = now;

                if (!calculator.isVoiceActive) {
                    await startRecognition();
                    if (calculator.isVoiceActive) {
                        elements.voiceToggle.textContent = 'Voice ON';
                        speak('Voice control activated');
                    }
                } else {
                    if (calculator.recognition) calculator.recognition.stop();
                    elements.voiceToggle.classList.remove('active');
                    elements.voiceToggle.textContent = 'Voice OFF';
                    speak('Voice control stopped');
                    calculator.isVoiceActive = false;
                }
            });

            // Bill scanner
            elements.billInput.addEventListener('change', handleBillScan);
        }

        // Button handler
        function handleButton(value) {
            const now = Date.now();
            if (now - calculator.lastClickTime < 200) return; // Debounce clicks
            calculator.lastClickTime = now;

            console.log('Button clicked:', value);
            if (value === 'C') {
                calculator.currentInput = '0';
                speak('Cleared');
            } else if (value === '=') {
                try {
                    const result = math.evaluate(calculator.currentInput).toString();
                    speakResult(result);
                    calculator.calculationHistory.push({
                        date: new Date().toLocaleString(),
                        input: calculator.currentInput,
                        result: result
                    });
                    calculator.currentInput = result;
                } catch (error) {
                    console.error('Calculation error:', error);
                    calculator.currentInput = 'Error';
                    speak('Error in calculation');
                }
            } else {
                if (calculator.currentInput === '0' && !['+', '-', '*', '/', '(', ')'].includes(value)) {
                    calculator.currentInput = value;
                } else if (/[+\-*/]$/.test(calculator.currentInput) && /[+\-*/]/.test(value)) {
                    calculator.currentInput = calculator.currentInput.slice(0, -1) + value;
                } else {
                    calculator.currentInput += value;
                }
                speak(value);
            }
            elements.display.textContent = calculator.currentInput;
        }

        // Speech functions
        function speak(text) {
            if (!window.speechSynthesis) {
                console.error('Speech synthesis not supported');
                return;
            }

            const translatedText = calculator.translations[calculator.currentLang][text] || text;
            const utterance = new SpeechSynthesisUtterance(translatedText);
            utterance.lang = calculator.currentLang;
            utterance.volume = 1;
            utterance.rate = 0.9;
            utterance.pitch = 1;
            window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utterance);
        }

        function speakResult(result) {
            const messages = {
                'en-IN': `The result is ${result}`,
                'hi-IN': `जवाब है ${result}`,
                'bn-IN': `ফলাফল হল ${result}`
            };
            speak(messages[calculator.currentLang]);
        }

        // Theme functions
        function applyTheme(theme) {
            document.body.className = theme;
            console.log('Applied theme:', theme);
        }

        // Language functions
        function updateLangButtonText() {
            elements.langCycle.textContent = calculator.languages[calculator.langIndex].name;
        }

        // History functions
        function updateHistoryUI() {
            elements.historyList.innerHTML = '';
            calculator.calculationHistory.forEach(entry => {
                const li = document.createElement('li');
                li.textContent = `${entry.date}: ${entry.input} = ${entry.result}`;
                elements.historyList.appendChild(li);
            });

            const totals = calculator.calculationHistory.filter(h => !isNaN(parseFloat(h.result))).map(h => parseFloat(h.result));
            if (totals.length > 0) {
                const avg = totals.reduce((a, b) => a + b, 0) / totals.length;
                elements.historyInsights.textContent = `Average Result: ${avg.toFixed(2)}`;
            } else {
                elements.historyInsights.textContent = 'No numeric results yet.';
            }
        }

        // Voice recognition functions
        function initializeRecognition() {
            if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
                console.error('SpeechRecognition not supported in this browser.');
                speak('Voice recognition unavailable. Please use Chrome or Edge.');
                elements.voiceToggle.disabled = true;
                elements.voiceToggle.style.opacity = '0.5';
                elements.voiceToggle.style.cursor = 'not-allowed';
                return false;
            }

            try {
                calculator.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
                calculator.recognition.continuous = false;
                calculator.recognition.interimResults = false;
                calculator.recognition.lang = calculator.currentLang;
                calculator.recognition.onstart = () => console.log('Voice recognition started');
                calculator.recognition.onerror = handleRecognitionError;
                calculator.recognition.onend = handleRecognitionEnd;
                calculator.recognition.onresult = handleRecognitionResult;
                console.log('SpeechRecognition initialized successfully');
                return true;
            } catch (error) {
                console.error('Failed to initialize SpeechRecognition:', error);
                return false;
            }
        }

        async function checkMicPermission() {
            try {
                const result = await navigator.permissions.query({ name: 'microphone' });
                console.log('Microphone permission state:', result.state);
                if (result.state === 'denied') {
                    speak('Microphone permission is denied. Please enable it in your browser settings.');
                    console.log('Go to Settings > Privacy and Security > Microphone to allow access.');
                    return false;
                }
                return result.state !== 'denied';
            } catch (error) {
                console.error('Error checking microphone permission:', error);
                speak('Error checking microphone permission. Please check your browser settings.');
                return false;
            }
        }

        async function startRecognition() {
            if (!calculator.recognition) {
                if (calculator.recognitionAttempts < calculator.maxRecognitionAttempts) {
                    calculator.recognitionAttempts++;
                    console.log(`Retrying SpeechRecognition initialization, attempt ${calculator.recognitionAttempts}`);
                    if (initializeRecognition()) {
                        setTimeout(startRecognition, 1000);
                    } else {
                        speak('Voice recognition unavailable. Please use Chrome or Edge.');
                    }
                    return;
                } else {
                    console.error('Failed to initialize SpeechRecognition after retries');
                    speak('Voice recognition unavailable. Please use Chrome or Edge.');
                    elements.voiceToggle.disabled = true;
                    elements.voiceToggle.style.opacity = '0.5';
                    elements.voiceToggle.style.cursor = 'not-allowed';
                    return;
                }
            }

            const permissionGranted = await checkMicPermission();
            if (!permissionGranted) {
                elements.voiceToggle.classList.remove('active');
                calculator.isVoiceActive = false;
                return;
            }

            try {
                calculator.recognition.start();
                calculator.isVoiceActive = true;
                console.log('Microphone is ON, speak now...');
                elements.voiceToggle.classList.add('active');
            } catch (error) {
                console.error('Microphone start error:', error);
                speak('Failed to start microphone. Please ensure your microphone is connected and permissions are granted.');
                elements.voiceToggle.classList.remove('active');
                calculator.isVoiceActive = false;
            }
        }

        function handleRecognitionResult(event) {
            const command = event.results[0][0].transcript.toLowerCase().trim();
            console.log('Heard command:', command);

            if (command.includes('change to hindi') || command.includes('hindi mein badlo')) {
                calculator.currentLang = 'hi-IN';
                calculator.recognition.lang = calculator.currentLang;
                calculator.langIndex = 1;
                updateLangButtonText();
                speak('भाषा हिंदी में बदल गई');
            } else if (command.includes('change to english') || command.includes('english mein badlo')) {
                calculator.currentLang = 'en-IN';
                calculator.recognition.lang = calculator.currentLang;
                calculator.langIndex = 0;
                updateLangButtonText();
                speak('Language changed to English');
            } else if (command.includes('change to bengali') || command.includes('bangla mein badlo')) {
                calculator.currentLang = 'bn-IN';
                calculator.recognition.lang = calculator.currentLang;
                calculator.langIndex = 2;
                updateLangButtonText();
                speak('ভাষা বাংলায় পরিবর্তন হয়েছে');
            } else if (command.includes('change theme') || command.includes('theme badlo')) {
                calculator.themeIndex = (calculator.themeIndex + 1) % calculator.themes.length;
                applyTheme(calculator.themes[calculator.themeIndex]);
                speak(`Theme changed to ${calculator.themes[calculator.themeIndex]}`);
            } else if (command.includes('light theme') || command.includes('light mode')) {
                applyTheme('light');
                speak('Theme changed to light');
            } else if (command.includes('dark theme') || command.includes('dark mode')) {
                applyTheme('dark');
                speak('Theme changed to dark');
            } else if (command.includes('colorful theme') || command.includes('colorful mode')) {
                applyTheme('colorful');
                speak('Theme changed to colorful');
            } else if (command.includes('current time') || command.includes('time bolo')) {
                const now = new Date();
                const timeString = now.toLocaleTimeString(calculator.currentLang === 'en-IN' ? 'en-US' : calculator.currentLang);
                calculator.currentInput = timeString;
                elements.display.textContent = calculator.currentInput;
                const timeMessages = {
                    'en-IN': `The current time is ${timeString}`,
                    'hi-IN': `अभी का समय है ${timeString}`,
                    'bn-IN': `বর্তমান সময় হল ${timeString}`
                };
                speak(timeMessages[calculator.currentLang]);
            } else if (command.includes('show history')) {
                elements.historyPanel.style.display = 'block';
                updateHistoryUI();
                speak('Showing your calculation history');
            } else if (command.includes('average of my calculations')) {
                const totals = calculator.calculationHistory.filter(h => !isNaN(parseFloat(h.result))).map(h => parseFloat(h.result));
                if (totals.length > 0) {
                    const avg = totals.reduce((a, b) => a + b, 0) / totals.length;
                    speak(`Your average calculation result is ${avg.toFixed(2)}`);
                } else {
                    speak('No numeric calculations in history yet');
                }
            } else if (command.includes('clear') || command.includes('saaf karo')) {
                calculator.currentInput = '0';
                speak('Cleared');
                elements.display.textContent = calculator.currentInput;
            } else {
                const match = command.match(/(\d+\.?\d*)\s*([+\-*/])\s*(\d+\.?\d*)/);
                if (match) {
                    let num1 = match[1];
                    let operator = match[2];
                    let num2 = match[3];
                    calculator.currentInput = `${num1}${operator}${num2}`;
                    elements.display.textContent = calculator.currentInput;
                    console.log('Expression:', calculator.currentInput);
                    try {
                        const result = math.evaluate(calculator.currentInput).toString();
                        speakResult(result);
                        elements.display.textContent = result;
                        console.log('Result:', result);
                        calculator.calculationHistory.push({
                            date: new Date().toLocaleString(),
                            input: `${num1} ${operator} ${num2}`,
                            result: result
                        });
                        calculator.currentInput = result;
                    } catch {
                        calculator.currentInput = 'Error';
                        speak('Error in calculation');
                        elements.display.textContent = calculator.currentInput;
                    }
                } else {
                    speak('Please repeat the command clearly');
                }
            }

            if (calculator.isVoiceActive) setTimeout(startRecognition, 1500);
        }

        function handleRecognitionError(event) {
            console.error('Voice error:', event.error);
            let errorMessage = 'Voice error, please try again';
            if (event.error === 'no-speech') errorMessage = 'No speech detected, please speak';
            else if (event.error === 'audio-capture') errorMessage = 'Microphone not found, please check your device';
            else if (event.error === 'not-allowed') errorMessage = 'Microphone permission denied, please enable it in browser settings';
            speak(errorMessage);
            elements.voiceToggle.classList.remove('active');
            elements.voiceToggle.textContent = 'Voice OFF';
            calculator.isVoiceActive = false;
            if (event.error === 'not-allowed') checkMicPermission();
        }

        function handleRecognitionEnd() {
            console.log('Voice recognition stopped');
            if (calculator.isVoiceActive) setTimeout(startRecognition, 1500);
        }

        // Bill scanner functions
        async function handleBillScan(event) {
            const file = event.target.files[0];
            if (!file) return;

            elements.scanStatus.textContent = calculator.translations[calculator.currentLang]['Scanning bill'] || 'Scanning bill';
            elements.scanStatus.className = 'scan-status scanning';
            speak('Scanning bill');

            const img = new Image();
            img.src = URL.createObjectURL(file);

            img.onload = async () => {
                try {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const maxWidth = 800;
                    let width = img.width;
                    let height = img.height;
                    if (width > maxWidth) {
                        height = (maxWidth / width) * height;
                        width = maxWidth;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);
                    const compressedImg = canvas.toDataURL('image/jpeg', 0.5);

                    const worker = await Tesseract.createWorker('eng', Tesseract.OEM.LSTM_ONLY, {
                        workerPath: 'https://unpkg.com/tesseract.js@v5.0.4/dist/worker.min.js',
                        langPath: 'https://tessdata.projectnaptha.com/4.0.0_best',
                        corePath: 'https://unpkg.com/tesseract.js-core@v5.0.0/tesseract-core.wasm.js',
                    });
                    await worker.setParameters({
                        tessedit_char_whitelist: '0123456789₹$.TotalAMOUNT',
                        tessedit_pageseg_mode: Tesseract.PSM.AUTO,
                        user_defined_dpi: '200'
                    });

                    const { data: { text } } = await worker.recognize(compressedImg);
                    console.log('Bill text:', text);

                    const totalMatch = text.match(/(?:Total|TOTAL|Amount|AMOUNT|Sum|SUM|Final|Grand Total)[:\s]*[₹$]?(\d+\.?\d{0,2})/i) ||
                                      text.match(/(\d+\.?\d{0,2})(?:\s*$|\s+[^\d])/i);
                    const total = totalMatch ? totalMatch[1] : 'Not Found';
                    elements.billResult.textContent = `Total: ${total}`;

                    elements.scanStatus.textContent = calculator.translations[calculator.currentLang]['Scan complete'] || 'Scan complete';
                    elements.scanStatus.className = 'scan-status complete';

                    if (total !== 'Not Found') {
                        calculator.currentInput = total;
                        elements.display.textContent = calculator.currentInput;
                        const totalMessages = {
                            'en-IN': `Scan complete, the bill total is ${total}`,
                            'hi-IN': `स्कैन पूरा हुआ, बिल का कुल योग है ${total}`,
                            'bn-IN': `স্ক্যান সম্পূর্ণ, বিলের মোট হল ${total}`
                        };
                        speak(totalMessages[calculator.currentLang]);
                        calculator.calculationHistory.push({
                            date: new Date().toLocaleString(),
                            input: 'Bill Scan',
                            result: total
                        });
                    } else {
                        speak('Error scanning bill');
                        elements.scanStatus.textContent = calculator.translations[calculator.currentLang]['Error scanning bill'] || 'Error scanning bill';
                    }

                    await worker.terminate();
                    URL.revokeObjectURL(img.src);
                } catch (error) {
                    console.error('Scan error:', error);
                    elements.billResult.textContent = 'Error scanning bill';
                    elements.scanStatus.textContent = calculator.translations[calculator.currentLang]['Error scanning bill'] || 'Error scanning bill';
                    elements.scanStatus.className = 'scan-status';
                    speak('Error scanning bill');
                }
            };
            img.onerror = () => {
                console.error('Image load error');
                elements.billResult.textContent = 'Error loading image';
                elements.scanStatus.textContent = calculator.translations[calculator.currentLang]['Error scanning bill'] || 'Error scanning bill';
                elements.scanStatus.className = 'scan-status';
                speak('Error scanning bill');
            };
        }

        // Initialize when math.js is loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Check if math.js is already loaded
            if (typeof math !== 'undefined') {
                initCalculator();
            } else {
                // Wait for math.js to load
                const checkMath = setInterval(() => {
                    if (typeof math !== 'undefined') {
                        clearInterval(checkMath);
                        initCalculator();
                    }
                }, 100);
            }
        });
    </script>
</body>
</html>
